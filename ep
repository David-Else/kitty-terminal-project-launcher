#!/bin/bash
set -eu

[ ! "${TERM}" = "xterm-kitty" ] && echo "This script must be run in Kitty terminal." && exit 1
[ -z "$EDITOR" ] && echo "Warning: \$EDITOR variable is not set." && exit 1

level_1_dir="$HOME/Documents/"
level_2_dirs=("$level_1_dir"/business "$level_1_dir"/personal "$level_1_dir"/apps-sites)
project_dir_to_add_to="$level_1_dir" # to be mutated
recent_projects_history_file="$HOME/.config/recent-projects/history.txt"

touch "$recent_projects_history_file"
[ ! -s "$recent_projects_history_file" ] && echo "Start of recently opened project history." >>"$recent_projects_history_file"

add_selected_directory_to_base_dir() {
    cd "$project_dir_to_add_to" || exit
    select d in */; do
        test -n "$d" && break
        echo ">>> Invalid Selection"
    done
    project_dir_to_add_to="$project_dir_to_add_to$d"
}

create_new_project_directory() {
    read -rp 'What is the title of this project? ' title
    title=${title,,}    # make title lowercase
    title=${title// /-} # remove spaces and replace with -

    for i in {1..2}; do
        echo "Please select level $i folder to put it in:"
        add_selected_directory_to_base_dir
    done

    project_dir_to_add_to="$project_dir_to_add_to$title"
    mkdir "$project_dir_to_add_to" && touch "$project_dir_to_add_to"/README.md
    echo "$project_dir_to_add_to created."
    exit 0
}

select_project() {
    read -p "Create a [n]ew project, or search [r]ecent projects or [a]ll projects to open in $EDITOR: " -n 1 -r
    echo ""

    case "$REPLY" in
    n) create_new_project_directory ;;
    r) items=$(cat "$recent_projects_history_file") ;;
    a) mapfile -t items < <(find "${level_2_dirs[@]}" -maxdepth 2 -mindepth 1 -type d) ;;
    *) echo "Invalid selection" && exit 1 ;;
    esac

    IFS=$'\n'
    selected_dir=$(echo "${items[*]}" | fzf) || exit
    project_name=${selected_dir##*/}

    # Add the selected project to the first line of history.txt if not already present
    grep -q "^$selected_dir$" "$recent_projects_history_file" && sed -i "\|^$selected_dir$|d" "$recent_projects_history_file"
    sed -i "1i$selected_dir" "$recent_projects_history_file"
}

detect_project_type_and_create_windows() {
    kitty @ goto-layout tall # Note: make sure you have `enabled_layouts stack,tall` in kitty.conf
    kitty @ set-window-title "$EDITOR:$project_name"
    cd "$selected_dir" || exit 1

    if [ -f "Cargo.toml" ] || [ -f "package.json" ]; then
        kitty @ launch --title "Terminal:$project_name" --keep-focus --cwd="$selected_dir"
    fi
    if [ -d ".git" ]; then
        kitty @ launch --title "Lazygit:$project_name" --keep-focus --cwd="$selected_dir" lazygit
    fi
}

clear
select_project
detect_project_type_and_create_windows

$EDITOR .

kitty @ close-window --match title:^"Terminal:$project_name" --ignore-no-match
kitty @ close-window --match title:^"Lazygit:$project_name" --ignore-no-match
